package queries

import "http://inf.mit.bme.hu/testcase"

@Constraint(severity = "error",
            message = "The 'toLane' reference of the lane points to itself",
            key = {lane})
pattern leadsToItself(lane: Lane) {
	Lane.toLane(lane, lane);
}

@Constraint(severity = "error",
            message = "The 'rightLane' reference of the roadcomponent points to itself",
            key = {comp})
pattern nextToItself(comp: RoadComponent) {
	RoadComponent.rightLane(comp, comp);
}

@Constraint(severity = "error",
            message = "There is a cycle of 'righLane' references",
            key = {lane})
pattern nextToCycle(lane: RoadComponent) {
	find rightLane+(lane,lane);
}

@Constraint(severity = "error",
            message = "The lanes have toLane/fromLane AND leftLane/rightLane references between them",
            key = {lane1, lane2})
pattern nextToFollowingLane(lane1: Lane, lane2: Lane) {
	find rightLane+(lane1,lane2);
	Lane.toLane(lane1, lane2);
}

@Constraint(severity = "error",
            message = "Turning lane can't have leftLane",
            key = {lane1, lane2})
pattern turningLaneHasLeftLane(lane1: TurningLane, lane2 : Lane) {
	//Lane.straight(lane1, false);
	RoadComponent.leftLane(lane1, lane2);
}

@Constraint(severity = "error",
            message = "Turning lane can't have rightLane",
            key = {lane1, lane2})
pattern turningLaneHasRightLane(lane1: TurningLane, lane2 : Lane) {
	//Lane.straight(lane1, false);
	RoadComponent.rightLane(lane1, lane2);
}

@Constraint(severity = "error",
            message = "Sidewalk is not on the side",
            key = {sidewalk})
pattern sidewalkNotOnRightSide(sidewalk: Sidewalk) {
	RoadComponent.rightLane(sidewalk, _other);
}

private pattern rightLane(l1: RoadComponent, l2: RoadComponent){
	RoadComponent.rightLane(l1, l2);
}

private pattern leftLane(l1: RoadComponent, l2: RoadComponent){
	RoadComponent.leftLane(l1, l2);
}

private pattern toLane(l1: Lane, l2: Lane){
	Lane.toLane(l1, l2);
}

private pattern fromLane(l1: Lane, l2: Lane){
	Lane.fromLane(l1, l2);
}

@Constraint(severity = "error",
            message = "A parallel pair of lanes cross while connecting to an other parallel pair of lanes",
            key = {lane1, lane2})
pattern crossConnection(lane1: Lane, lane2: Lane, lane3: Lane, lane4: Lane) {
	find rightLane+(lane1, lane2);
	find rightLane+(lane3, lane4);
	Lane.toLane(lane1, lane4);
	Lane.toLane(lane2, lane3);
}

//@Constraint(severity = "error",
//            message = "Lane is next to a lane, that is in the other direction",
//            key = {lane1, lane2})
//pattern laneInWrongDirection(lane1: RoadComponent, lane2: RoadComponent) {
//	RoadSegment.forward(segm, lane1);
//	RoadSegment.backward(segm, lane2);
//	RoadComponent.leftLane(lane1, lane2);
//}

@Constraint(severity = "error",
            message = "Lane is next to a lane, that is in a different segment or different direction",
            key = {lane1, lane2})
pattern laneInWrongSegmentOrDirection(lane1: RoadComponent, lane2: RoadComponent) {
	RoadComponent.leftLane(lane1, lane2);
	neg find lanesInSameSegmentAndDirection(_segm, lane1, lane2);
}

private pattern lanesInSameSegmentAndDirection(seg: RoadSegment, l1: RoadComponent, l2: RoadComponent) {
	RoadSegment.forward(seg, l1);
	RoadSegment.forward(seg, l2);
} or {
	RoadSegment.backward(seg, l1);
	RoadSegment.backward(seg, l2);
	
}

private pattern lanesInSameSegmentOppositeDirection(seg: RoadSegment, l1: RoadComponent, l2: RoadComponent) {
	RoadSegment.forward(seg, l1);
	RoadSegment.backward(seg, l2);
} or {
	RoadSegment.backward(seg, l1);
	RoadSegment.forward(seg, l2);
	
}

private pattern reachableTroughRightLane(l1: RoadComponent, l2: RoadComponent) {
	find rightLane+(l1, l2);
}

private pattern segmentHasUnconnectedLanesInSameDirection(segm: RoadSegment) {
	lane1 != lane2;
	find lanesInSameSegmentAndDirection(segm, lane1, lane2);
	neg find reachableTroughRightLane(lane1, lane2);
	neg find reachableTroughRightLane(lane2, lane1);
}

@Constraint(severity = "error",
            message = "Lanes connect to different directions in the same segment",
            key = {lane1, lane2, lane3, lane4})
pattern lanesConnectToDifferentDirectionsInSameSegment(lane1: Lane, lane2: Lane, lane3: Lane, lane4: Lane) {
	lane1 != lane2;
	find lanesInSameSegmentAndDirection(_seg1, lane1, lane2);
	Lane.toLane(lane1, lane3);
	Lane.toLane(lane2, lane4);
	find lanesInSameSegmentOppositeDirection(_seg2, lane3, lane4);
}

@Constraint(severity = "error",
            message = "fromLane of turning lane must be in a different segment",
            key = {lane1, lane2})
pattern fromLaneOfTurnInSameSegment(lane1: TurningLane, lane2: Lane) {
	//Lane.straight(lane1, false);
	Lane.fromLane(lane1, lane2);
	find roadComponentOfRoadSegment(segment, lane1);
	find roadComponentOfRoadSegment(segment, lane2);
}

@Constraint(severity = "error",
            message = "toLane of turning lane must be in a different segment",
            key = {lane1, lane2})
pattern toLaneofTurnInSameSegment(lane1: TurningLane, lane2: Lane) {
	//Lane.straight(lane1, false);
	Lane.toLane(lane1, lane2);
	find roadComponentOfRoadSegment(segment, lane1);
	find roadComponentOfRoadSegment(segment, lane2);
}

@Constraint(severity = "error",
            message = "Actor has multiple states in the same frame",
            key = {frame, actor})
pattern actorHasMultipleStatesInFrame(frame: Frame, actor: Actor) {
	Frame.state(frame, state1);
	Frame.state(frame, state2);
	state1 != state2;
	State.actor(state1, actor);
	State.actor(state2, actor);
}

@Constraint(severity = "error",
            message = "There is a cycle of 'nextFrame' references",
            key = {frame})
pattern nextFrameCycle(frame: Frame) {
	find nextFrame+(frame, frame);
}

private pattern nextFrame(frame1: Frame, frame2: Frame) {
	Frame.nextFrame(frame1, frame2);
}


@Constraint(severity = "error",
            message = "Lane has more than one crosswalk",
            key = {lane, sign1, sign2})
pattern multipleCrosswalksOnLane(lane: RoadComponent, sign1: Crosswalk, sign2: Crosswalk) {
	sign1 != sign2;
	Sign.forRoadComponent(sign1, lane);
	Sign.forRoadComponent(sign2, lane);
}


@Constraint(severity = "error",
            message = "Lane has more than one stop sign",
            key = {lane, sign1, sign2})
pattern multipleStopSignsOnLane(lane: RoadComponent, sign1: StopSign, sign2: StopSign) {
	sign1 != sign2;
	Sign.forRoadComponent(sign1, lane);
	Sign.forRoadComponent(sign2, lane);
}


@Constraint(severity = "error",
            message = "Lane has more than one give way sign",
            key = {lane, sign1, sign2})
pattern multipleGiveWaySignsOnLane(lane: RoadComponent, sign1: GiveWaySign, sign2: GiveWaySign) {
	sign1 != sign2;
	Sign.forRoadComponent(sign1, lane);
	Sign.forRoadComponent(sign2, lane);
}


@Constraint(severity = "error",
            message = "Lane has give way sign and stop sign",
            key = {lane, sign1, sign2})
pattern giveWaySignAndStopSignOnLane(lane: RoadComponent, sign1: GiveWaySign, sign2: StopSign) {
	sign1 != sign2;
	Sign.forRoadComponent(sign1, lane);
	Sign.forRoadComponent(sign2, lane);
}

@Constraint(severity = "error",
            message = "Sidewalk is not next to a lane",
            key = {sidewalk})
pattern unreachableSidewalk(sidewalk: Sidewalk) {
	neg find reachableSidewalk(sidewalk);
}

private pattern reachableSidewalk(sidewalk: Sidewalk) {
	RoadComponent.rightLane(_lane, sidewalk);
} or {
	RoadComponent.leftLane(_lane, sidewalk);
}

@Constraint(severity = "error",
            message = "RoadSegment must have at least one RoadComponent",
            key = {roadSegment})
pattern emptyRoadSegment(roadSegment : RoadSegment) {
	neg find roadComponentOfRoadSegment(roadSegment, _);
}

pattern roadComponentOfRoadSegment(roadSegment : RoadSegment, roadComponent : RoadComponent) {
	RoadSegment.forward(roadSegment, roadComponent);
} or {
	RoadSegment.backward(roadSegment, roadComponent);
}

@Constraint(severity = "error",
            message = "RoadSegment with turning lane must have rightNeighborOfNeighbor and leftNeigborOfNeighbor",
            key = {roadSegment})
pattern roadSegmentNoNeighbor(roadSegment : RoadSegment) {
	find roadComponentOfRoadSegment(roadSegment, lane);
	TurningLane(lane);
	//Lane.straight(lane, false);
	neg find neighborOfNeighborOfRoadSegment(roadSegment, _);
}

private pattern neighborOfNeighborOfRoadSegment(roadSegment : RoadSegment, neighbor : RoadSegment) {
	RoadSegment.rightNeighborOfNeighbor(roadSegment, neighbor);
} or {
	RoadSegment.leftNeighborOfNeighbor(roadSegment, neighbor);
}

@Constraint(severity = "error", 
			message = "All lanes must be connected",
			key = {lane1})
pattern unconnectedLane(lane1 : Lane) {
	neg find toLane(lane1, _);
	neg find fromLane(lane1, _);
	neg find leftLane(lane1, _);
	neg find rightLane(lane1, _);
}

@Constraint(severity = "error",
            message = "Turn has no fromLane",
            key = {turn})
pattern turnNoFromLane(turn: TurningLane) {
	//Lane.straight(turn, false);
	neg find fromLane(turn, _fromlane);
}

@Constraint(severity = "error",
            message = "Turn has no toLane",
            key = {turn})
pattern turnNoToLane(turn: TurningLane) {
	//Lane.straight(turn, false);
	neg find toLane(turn, _tolane);
}

// If they turn in the opposite direction, I can't draw them (atm).
// If it's important, it can be done.
@Constraint(severity = "error",
            message = "Turn is following an other turn",
            key = {turn2})
pattern turnFollowingTurn(turn1: TurningLane, turn2: TurningLane) {
	//Lane.straight(turn1, false);
	//Lane.straight(turn2, false);
	Lane.toLane(turn1, turn2);
}

@Constraint(severity = "error",
            message = "toLane cycle of length two",
            key = {lane1, lane2})
pattern twoLongToLaneCycle(lane1: Lane, lane2 : Lane) {
	Lane.toLane(lane1, lane2);
	Lane.toLane(lane2, lane1);
}

@Constraint(severity = "error",
            message = "opposite lanes connect to same lane",
            key = {lane1, lane2, lane3})
pattern oppositeLanesLeadToSameLane(lane1: Lane, lane2 : Lane, lane3 : Lane) {
	find lanesInSameSegmentOppositeDirection(_, lane1, lane2);
	Lane.toLane(lane1, lane3);
	Lane.toLane(lane2, lane3);
}

@Constraint(severity = "error",
            message = "opposite lanes come from same lane",
            key = {lane1, lane2, lane3})
pattern oppositeLanesComeFromSameLane(lane1: Lane, lane2 : Lane, lane3 : Lane) {
	find lanesInSameSegmentOppositeDirection(_, lane1, lane2);
	Lane.fromLane(lane1, lane3);
	Lane.fromLane(lane2, lane3);
}

@Constraint(severity = "error",
            message = "lane leads to other lane in same segment, opposite direction",
            key = {lane1, lane2})
pattern toLaneSameSegmentOppositeDirection(lane1: Lane, lane2 : Lane) {
	Lane.toLane(lane1, lane2);
	find lanesInSameSegmentOppositeDirection(_, lane1, lane2);
}

@Constraint(severity = "error",
            message = "lane leads to other lane in same segment, same direction",
            key = {lane1, lane2})
pattern toLaneSameSegmentSameDirection(lane1: Lane, lane2 : Lane) {
	Lane.toLane(lane1, lane2);
	find lanesInSameSegmentAndDirection(_, lane1, lane2);
}

@Constraint(severity = "error",
            message = "All turning lanes and lanes in same segment must be forward",
            key = {lane2})
pattern turningLaneBackward(lane1: TurningLane, lane2 : Lane) {
	//Lane.straight(lane1, false);
	find roadComponentOfRoadSegment(segment, lane1);
	RoadSegment.backward(segment, lane2);
}


// TODO could define minimum length before it returns to same segment
@Constraint(severity = "error",
            message = "toLane and fromLane of a lane must be in different segments",
            key = {lane1})
pattern toLaneAndFromLaneInSameSegment(lane1: Lane) {
	Lane.toLane(lane1, lane2);
	Lane.fromLane(lane1, lane3);
	find roadComponentOfRoadSegment(segment, lane2);
	find roadComponentOfRoadSegment(segment, lane3);
}


// TODO remove all cycles???

// TODO constrict to grid???



@Constraint(severity = "error",
            message = "rightNeighborOfNeighbor can't point to itself",
            key = {segment})
pattern rightNeighborOfNeighborPointsToItself(segment : RoadSegment) {
	RoadSegment.rightNeighborOfNeighbor(segment, segment);
}

@Constraint(severity = "error",
            message = "Only segments next to a segment with turning lane can have rightNeighborOfNeigbor",
            key = {segment})
pattern rightNeighborOfNeighborNoTurningLane(segment : RoadSegment) {
	RoadSegment.rightNeighborOfNeighbor(segment, _);
	neg find segmentNextToTurn(segment);
}

private pattern segmentNextToTurn(segment : RoadSegment) {
	find roadComponentOfRoadSegment(segment, lane1);
	Lane.fromLane(lane1, lane2);
	TurningLane(lane2);
	//Lane.straight(lane2, false);
} or {
	find roadComponentOfRoadSegment(segment, lane1);
	Lane.toLane(lane1, lane2);
	TurningLane(lane2);
	//Lane.straight(lane2, false);
}

/*
@Constraint(severity = "error",
            message = "rightNeighborOfNeighbor can't point to itself",
            key = {scenario})
pattern noTurn(scenario : Scenario) {
	neg find segmentWithTurn(scenario);
}
* 
private pattern segmentWithTurn(scenario : Scenario) {
	Scenario.roadsegment(scenario, segment);
	RoadSegment.forward(segment, lane);
	Lane.straight(lane, false);
} or {
	Scenario.roadsegment(scenario, segment);
	RoadSegment.backward(segment, lane);
	Lane.straight(lane, false);
}
*/


@Constraint(severity = "error",
            message = "If two straight lanes are in the same segment and their toLanes/fromLanes are in the same segment, they must be next to each other",
            key = {lane1, lane2})
pattern missingLeftLaneConnectionToLane(lane1 : StraightLane, lane2 : StraightLane) {
	find lanesInSameSegmentAndDirection(segment1, lane1, lane2);
	//Lane.straight(lane1, true);
	//Lane.straight(lane2, true);
	Lane.toLane(lane1, lane3);
	Lane.toLane(lane2, lane4);
	find lanesInSameSegmentAndDirection(segment1, lane3, lane4);
	neg find leftLaneOrRightLaneTransitive(lane1, lane2);
}

@Constraint(severity = "error",
            message = "If two straight lanes are in the same segment and their toLanes/fromLanes are in the same segment, they must be next to each other",
            key = {lane1, lane2})
pattern missingLeftLaneConnectionFromLane(lane1 : StraightLane, lane2 : StraightLane) {
	find lanesInSameSegmentAndDirection(segment1, lane1, lane2);
	//Lane.straight(lane1, true);
	//Lane.straight(lane2, true);
	Lane.fromLane(lane1, lane3);
	Lane.fromLane(lane2, lane4);
	find lanesInSameSegmentAndDirection(segment1, lane3, lane4);
	neg find leftLaneOrRightLaneTransitive(lane1, lane2); 
}

private pattern leftLaneOrRightLaneTransitive(lane1 : Lane, lane2 : Lane) {
	find leftLane+(lane1, lane2);
} or {
	find rightLane+(lane1, lane2);
}


// exclude straight lanes splitting/merging
@Constraint(severity = "error",
            message = "Lane splits into two straight lanes",
            key = {lane})
pattern splittingLane(lane : Lane) {
	Lane.toLane(lane, lane2);
	Lane.toLane(lane, lane3);
	lane2 != lane3;
	StraightLane(lane2);
	StraightLane(lane3);
	//Lane.straight(lane2, true);
	//Lane.straight(lane3, true);
}

@Constraint(severity = "error",
            message = "Two straight lanes merge into one lane",
            key = {lane})
pattern mergingLane(lane : Lane) {
	Lane.fromLane(lane, lane2);
	Lane.fromLane(lane, lane3);
	lane2 != lane3;
	StraightLane(lane2);
	StraightLane(lane3);
	//Lane.straight(lane2, true);
	//Lane.straight(lane3, true);
}

@Constraint(severity = "error",
            message = "toLanes are in different segments",
            key = {lane})
pattern toLanesInDifferentSegments(lane : Lane) {
	Lane.toLane(lane, lane2);
	Lane.toLane(lane, lane3);
	find roadComponentOfRoadSegment(segment, lane2);
	neg find roadComponentOfRoadSegment(segment, lane3);
}

@Constraint(severity = "error",
            message = "fromLanes are in different segments",
            key = {lane})
pattern fromLanesInDifferentSegments(lane : Lane) {
	Lane.fromLane(lane, lane2);
	Lane.fromLane(lane, lane3);
	find roadComponentOfRoadSegment(segment, lane2);
	neg find roadComponentOfRoadSegment(segment, lane3);
}

/*
// all lanes in segment continue/stop at the same place
// these may not be necessary
@Constraint(severity = "error",
            message = "If a lane has toLane, its rightLane must also have toLane",
            key = {lane})
pattern toLaneRightLaneNoToLane(lane : Lane) {
	Lane.toLane(lane, _);
	Lane.rightLane(lane, lane2);
	neg find toLane(lane2, _);
}

// may not be necessary
@Constraint(severity = "error",
            message = "If a lane has toLane, its leftLane must also have toLane",
            key = {lane})
pattern toLaneLeftLaneNoToLane(lane : Lane) {
	Lane.toLane(lane, _);
	Lane.leftLane(lane, lane2);
	neg find toLane(lane2, _);
}

// may not be necessary
@Constraint(severity = "error",
            message = "If a lane has fromLane, its rightLane must also have fromLane",
            key = {lane})
pattern fromLaneRightLaneNoFromLane(lane : Lane) {
	Lane.fromLane(lane, _);
	Lane.rightLane(lane, lane2);
	neg find fromLane(lane2, _);
}

// may not be necessary
@Constraint(severity = "error",
            message = "If a lane has fromLane, its leftLane must also have fromLane",
            key = {lane})
pattern fromLaneLeftLaneNoFromLane(lane : Lane) {
	Lane.fromLane(lane, _);
	Lane.leftLane(lane, lane2);
	neg find fromLane(lane2, _);
}

// may not be necessary
@Constraint(severity = "error",
            message = "If a lane has toLane, the opposite lane must have fromLane",
            key = {lane})
pattern toLaneOppositeLaneNoFromLane(lane : Lane) {
	find lanesInSameSegmentOppositeDirection(_, lane, lane2);
	Lane.toLane(lane, _);
	neg find fromLane(lane2, _);
}
*/

// unconnected segments
@Constraint(severity = "error",
            message = "There is no path between the lanes of the segments",
            key = {segment1, segment2})
pattern unconnectedSegments(segment1 : RoadSegment, segment2 : RoadSegment) {
	segment1 != segment2;
	neg find connectedSegments(segment1, segment2);
}

private pattern connectedSegments(segment1 : RoadSegment, segment2 : RoadSegment) {
	find directlyConnectedSegments+(segment1, segment2);
}

private pattern directlyConnectedSegments(segment1 : RoadSegment, segment2 : RoadSegment) {
	//segment1 != segment2;
	find roadComponentOfRoadSegment(segment1, component1);
	find roadComponentOfRoadSegment(segment2, component2);
	Lane.toLane(component1, component2);
} or {
	//segment1 != segment2;
	find roadComponentOfRoadSegment(segment1, component1);
	find roadComponentOfRoadSegment(segment2, component2);
	Lane.fromLane(component1, component2);
}

@Constraint(severity = "error",
            message = "There are too many lanes next to each other",
            key = {lane1, lane2, lane3})
pattern tooWideRoad(lane1 : Lane, lane2 : Lane, lane3 : Lane) {
	Lane.rightLane(lane1, lane2);
	Lane.rightLane(lane2, lane3);
}

// TODO if a segment has no turning lanes, all (straight) lanes must be connected to each other


@Constraint(severity = "error",
            message = "If a segment has turning lanes, all lanes in that segment must be connected on both ends to straight lanes",
            key = {lane1, lane2})
pattern turningLaneToLaneNotStaight(lane1 : TurningLane, lane2 : Lane) {
	find roadComponentOfRoadSegment(segment, lane1);
	find roadComponentOfRoadSegment(segment, lane2);
	//lane1 != lane2;
	neg find straightToLane(lane2, _);
	
}

private pattern straightToLane(lane1 : Lane, lane2 : StraightLane) {
	Lane.toLane(lane1, lane2);
}

@Constraint(severity = "error",
            message = "If a segment has turning lanes, all lanes in that segment must be connected on both ends to straight lanes",
            key = {lane1, lane2})
pattern turningLaneFromLaneNotStaight(lane1 : TurningLane, lane2 : Lane) {
	find roadComponentOfRoadSegment(segment, lane1);
	find roadComponentOfRoadSegment(segment, lane2);
	//lane1 != lane2;
	neg find straightFromLane(lane2, _);
	
}

private pattern straightFromLane(lane1 : Lane, lane2 : StraightLane) {
	Lane.fromLane(lane1, lane2);
}

// TODO fromLane and toLane of TurningLane must be StraightLane AND all lanes in the segment containing the toLane/fromLane must be Straight
@Constraint(severity = "error",
            message = "toLane of TurningLane must be StraightLane AND all lanes in the segment containing the toLane must be Straight",
            key = {lane1, lane2})
pattern turningLaneInSegmentOfToLaneOfTurningLane(lane1 : TurningLane, lane2 : TurningLane) {
	Lane.toLane(lane1, lane3);
	find roadComponentOfRoadSegment(segment, lane3);
	find roadComponentOfRoadSegment(segment, lane2);
}

@Constraint(severity = "error",
            message = "fromLane of TurningLane must be StraightLane AND all lanes in the segment containing the fromLane must be Straight",
            key = {lane1, lane2})
pattern turningLaneInSegmentOfFromLaneOfTurningLane(lane1 : TurningLane, lane2 : TurningLane) {
	Lane.fromLane(lane1, lane3);
	find roadComponentOfRoadSegment(segment, lane3);
	find roadComponentOfRoadSegment(segment, lane2);
}
















